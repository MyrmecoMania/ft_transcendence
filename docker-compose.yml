services:
  webapp:
    container_name: webapp
    build:
      context: ./webapp/backend
      dockerfile: Dockerfile
    # depends_on:
    #   - front
    # environment:
      # - LOGSTASH_HOST=logstash:5001
    ports:
      - "3200:3200"
      # - "3232:3232"
    volumes:
      - ./webapp/backend/favicon.ico:/usr/src/app/favicon.ico
      - ./webapp/backend/avatars:/usr/src/app/avatars
      - ./webapp/backend/css:/usr/src/app/css
      - ./webapp/backend/transcendence.db:/usr/src/app/transcendence.db
      - ./webapp/backend/.env:/usr/src/app/.env
      - ./webapp/backend/views:/usr/src/app/views
      - ./webapp/backend/src:/usr/src/app/src
      - ./webapp/frontend/dist:/usr/src/app/dist
      - ./webapp/backend/package-lock.json:/usr/src/app/package-lock.json
      - ./webapp/backend/package.json:/usr/src/app/package.json
      - ./webapp/backend/tailwind.config.js:/usr/src/app/tailwind.config.js
      - ./data/logs/app:/var/log/app
    networks:
      - netwurk
    # healthcheck:
    #   test: ["CMD", "service", "nginx", "status"]
    #   interval: 1m
    #   timeout: 5s
    #   retries: 3
    restart: unless-stopped

  # front:
  #   container_name: front
  #   build:
  #     context: ./webapp/frontend
  #     dockerfile: Dockerfile
  #   # depends_on:
  #   #   - logstash
  #   # environment:
  #     # - LOGSTASH_HOST=logstash:5001
  #   # ports:
  #   #   - "3200:3200"
  #   volumes:
  #     - ./webapp/frontend:/usr/src/app
  #     # - ./webapp/frontend/dist:/usr/src/app/dist
  #     # - ./webapp/backend/avatars:/usr/src/app/avatars
  #     # - ./webapp/backend/css:/usr/src/app/css
  #     # - ./webapp/backend/views:/usr/src/app/views
  #     # - ./webapp/backend/src:/usr/src/app/src
  #     # - ./webapp/backend/package-lock.json:/usr/src/app/package-lock.json
  #     # - ./webapp/backend/package.json:/usr/src/app/package.json
  #     # - ./webapp/backend/tailwind.config.js:/usr/src/app/tailwind.config.js
  #     # - ./data/logs/front:/var/log/app
  #   networks:
  #     - netwurk
  #   # healthcheck:
  #   #   test: ["CMD", "service", "nginx", "status"]
  #   #   interval: 1m
  #   #   timeout: 5s
  #   #   retries: 3
  #   restart: no

  # sqlite:
  #   container_name: sqlite
  #   image: keinos/sqlite3
    

  nginx:
    container_name: nginx
    image: nginx
    tty: true
    # build:
    #   context: . # Context is set to the root folder of the project and not the nginx folder
    #              # because we need to copy the content of .ssl into the container and change the permission of it.
    #   dockerfile: ./nginx/Dockerfile
    ports:
      - "443:443"
    volumes:
      - front_data:/var/www/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - .ssl:/etc/nginx/certs
      # - ./data/logs/nginx/logs:/var/log/nginx
      # - ./data/logs/nginx/logs/access.log:/tmp/access.log
      # - ./data/logs/nginx/lib:/var/lib/nginx/logs
    depends_on:
      - webapp
    networks:
      - netwurk
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 1m
      timeout: 5s
      retries: 10
    restart: always

networks:
  netwurk:
    driver: bridge
    name: elk_elk
    external: true

volumes:
  front_data:
    driver: local
    driver_opts:
      type: 'none'
      device: ${FRONT_DATA}
      o: 'bind'
